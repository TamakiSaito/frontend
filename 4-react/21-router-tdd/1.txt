[TDD (テスト駆動開発) の具体的なステップ]

1. テストリストの作成
  ・実装したい機能や振る舞いをリストアップします。
  ・期待される動作に焦点を当て、具体的な実装方法は考えません。
1. 失敗するテストを書く (RED)
  ・リストから1つのテストケースを選びます。
  ・そのテストケースに対する失敗するテストコードを書きます。
  ・テストを実行し、失敗することを確認します。
1. テストを成功させる最小限のコードを書く (GREEN)
  ・テストが通るために必要最小限のコードを実装します。
  ・複雑なロジックは避け、テスト通過のみを目的とします。
  ・テストを再実行し、成功することを確認します。
1.リファクタリングを行う (REFACTOR)
  ・コードの品質を改善しつつ、テストが引き続き成功することを確認します。
  ・可読性、拡張性、保守性を高めることが目的です。
  ・繰り返し

[jest: テストコードを作成の注意点]
1. テストファイルの命名規則を守る
  ・テスト対象のファイル名に .test.ts または .spec.ts を付ける
1. テストの構造を明確にする
  ・describe ブロックでテストをグループ化し、it または test で個別のテストケースを記述する
1. 期待値と実際の値を適切に比較する
  ・toBe() は厳密な等価性を確認するため、オブジェクトや配列の比較には toEqual() を使用する
  ・浮動小数点数の比較には toBeCloseTo() を使用する
1. 非同期処理のテストに注意する
  ・非同期関数のテストには async/await または done コールバックを使用する
1. モックとスパイを適切に使用する
  ・外部依存を持つ関数のテストには、モックやスパイを活用する
1. テストの独立性を保つ
  ・各テストケースが他のテストに影響を与えないようにする
1. テストコードもリファクタリングする
  テストの重複を避け、可読性を高めるためにテストコードもリファクタリングする
1. Red-Green-Refactorサイクルを意識する
  まず失敗するテストを書き(Red)、次に最小限のコードでテストを通し(Green)、その後リファクタリングする(Refactor)
1. エッジケースも考慮する
  ・正常系だけでなく、異常系や境界値のテストも書く
1. テストの目的を明確にする
  ・テスト名は期待される動作を明確に示し、他の開発者が理解しやすいものにする