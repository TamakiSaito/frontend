- frameworkとは？
  - 何かの枠組み・骨組み・構造・体系・フレームワーク
  - 何かの基礎となる構造

- JavaScript Framework
  - react: Reactive app(SPA: Single Page Application) -library
    $ npx create-react-app app1 // 必須のWEBライブラリをCRAで一括インストールされるようになった_node_module
  - next(MPA: Multiple Page Application) - framework
    $ npx create-react-app app1
  - vue(SPA) - framework
    $ vue create app1
  - nuxt(MPA) - framework
    $ npx create-nuxt-app app1


- ReactDOM
 - DOMとは？(Document Object Model)
 - 画面を表示するまでに解釈したHTML/CSS/JavaScriptによって構築されたDOM(ツリー)を指す
 - DOMはChromeやSafari、Fox、IEなどのブラウザ上で、Webページを描画するために構築される
 - DOMはWebページとスクリプやプログラミング言語を接続するものでり、JavaScriptなどによって要素の値をダイレクトに操作することができる 
※ 仮想DOMを利用することで、ページ変更前と変更後を仮想DOMを比較、情報が変化した部分だけを素早く見つけ出し
  変更差分だけリアルDOMに反映する為、変更が最小限に抑えられるという仕組み


- node_moduleの一部
  - websocket
    - 過去 クライアント側から連絡をしなければホスト側から返答がなかった(変更後、手動リフレッシュが必要だった)
      Clint -> Host
      フロント -> サーバー
    - 現在 クライアント側から連絡をしなくてもホスト側から自動的に連絡がくる(変更後、自動リフレッシュされる)
      Clint <- Host
      フロント <- サーバー
  - webpack : bundling (export、importをできるようにする)
  - bable-loader : それぞれのjs versionに適したversionへ変換してくれる

node_module : library
public : static source(定的なソース、img、icon)
src : dynamic source(動的なソース、js、html、css)
package.json : library管理、script管理
package-lock.json : libraryのversion管理


-------------------
- Propsを渡す場合 
  - function Movies()の()に{ name }を入れる(2つ渡す場合は{ name, mark })
  - src < componentsフォルダにファイルを作成する

Movies.js(子コンポーネント)
export default function Movies({ name }) {
  return (
    <div>
      <h1>Movies App</h1>
      <h3>User: {name}</h3>
    </div>
  );
}

App.js(親コンポーネント)
- Movies.jsをimportして
import Movies from "./components/Movies";

export default function App() {
  const username = "Yang";
  const mark = "?";

  return (
    <div className="App">
      <p>
      - component化した<Movies />に User: {name}表記の中身をname=""で値を渡す
        <Hello name={username} mark={mark} />
        <Movies name="Yamamoto" />
        <Movies name="Takahashi" />
      </p>
    </div>
  );
}
-------------------
- if

- vip={true} -> vipに省略化
- vip={false} -> は記載しない
- {vip === true && "VIP様"} -> {vip && "VIP様"}に省略化 : vipがtrueだったらVIP様を記載 (truthy falsy概念)
- {vip ? "VIP様" : "様"} : vipがtrueの場合"VIP様"・falseの場合"様" (三項演算子)
- 
<Movies name="Saito" vip money />

- 「isXX」は Booleanの「変数名」に多々使われる
const isMoney = money ? "有料" : "無料";

-------------------
- useState, setState - 不変性の法則 -

  - Reactは全てオブジェクトなので関数と変数は「const」で定義
   - letの代わりに「useState」変数が必要
      let count = 0 の代わりに↓
      const [count, setCount] =useState(0);
      - 「setState」は[count, setCount]の「count」を変更する「関数」
  - 関数を呼び出す場合キャメルケース: onClick

  - Mounted時点でサーバーを叩く
   - mounted以外でサーバーを叩くとアプリが遅くなる
  -------------------

  - SIDU : 掲示板のロジック
    SELECT : 既存のデータを選択して、表示させる(Open API)
    INSERT : 新しいデータをデータベース(DB)に入れる
    DELETE : 既存のデータをデータベース(DB)から削除する
    UPDATE : 既存のデータをデータベース(DB)新しい値にて変更する
  
  -------------------