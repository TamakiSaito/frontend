1. TypeScriptの基礎知識

  -- TypeScript : 静的な型付け機能を搭載された、AltUS
                  TypeScriptでは変数や引数名の後ろに": 型"のように、型注釈と言われる型情報を付与することで
                  変数や引数に格納する値を制限できる


1. 型定義

  -- 変数 : var 変数: 型 = 値 "関数の中で宣言すると、その関数全体で使える。（関数スコープ）"
           let 変数: 型 = 値 "{} で囲まれたブロックの中だけで使える。（ブロックスコープ）"
            ※letを使って変数を宣言した場合、varで宣言された変数のスコープがその変数を含む関数まで利用できる状態になることとは異なり、ブロックスコープで宣言された変数は、その変数を含むロック内でしか参照可能になりません
           const 変数: 型 = 値 "{} で囲まれたブロックの中だけで使える。（ブロックスコープ）"

  -- Primitive Type(値参照) : ① string(文字列)
                             ② number(数値)
                             ③ boolean(真偽値)

  -- Referencial Type(住所参照) : ① Array(配列) : [] / const array: string[] = []
                                   ※Primetive以外にも、Interface、Ailiasなどにも対応

                                   Array<string> : 文字列要素を持つ配列(ジェネリック)

                                 ② Object(オブジェクト) / key: value = property
                                    ※ "?"を用いてオプショナル(省略可能)なプロパティとして指定可 

                                    type Person = {
                                      name: string;
                                      age: number;
                                      isHumen?: boolean;
                                    };

                                    const person: Person {
                                      name: "Micheal"
                                      age: 15
                                      isHumen: false
                                    };

                                 ③ Any : 全ての型を許容する型

                                 ④ Function : "引数"と"戻り値"に対して型定義
                                              オプショナルな引数は、末尾に"?"

                                    function sayHello(name: string, greeting?: string): string {
                                      return `${greeting || ''} ${name}`
                                    }
                                    sayHello('Micheal') // Micheal
                                    sayHello('Micheal', 'Hello') // Hello Micheal

                                    --- --- ---

                                              引数定義の際にデフォルト値を指定可
                                    
                                    function sayHello(name: string, greeting: string='Hello'): string {
                                      return `${greeting} ${name}`
                                    }
                                    sayHello('Micheal') // Hello Micheal
                                    sayHello('Micheal', 'Hey') // Hey Micheal

                                    --- --- ---

                                              関数を引数にとる関数の型

                                    

  -- typeof演算子 :  JavaScriptの値のデータ型を調べるもの
                    console.log(typeof 42);             // "number"（数値型）
                    console.log(typeof 'Hello');        // "string"（文字列型）
                    console.log(typeof true);           // "boolean"（真偽型）
                    console.log(typeof {});             // "object"（オブジェクト型）
                    console.log(typeof []);             // "object"（配列もオブジェクト型）
                    console.log(typeof undefined);      // "undefined"（未定義）
                    console.log(typeof null);           // "object"（nullもobjectとして扱われる特殊なケース）
                    console.log(typeof function(){});   // "function"（関数型） 

  -- Generic / ジェネリック型 : 様々な型に対応できるようにする型 / Array<T>
                              <T> の部分で型パラメータを指定する、異なる型にも対応できる柔軟なコードを作る仕組み

  -- Union / ユニオン型 : 複数の型のいずれか一つを許可する型 / string | number

  -- Tuple / タプル : 異なる型の要素を固定された順序で保持するデータ構造

_______________________
  ___________________
  function add(a, b) {
    return a + b;
  }
  console.log(add(3, 5));
  ___________________
  -- Prammeter / パラメーター : 関数やメゾットを定義する時に使用する変数名
                              ※ a や b がパラメーター
  -- Argument / 引数 : 実際に関数を呼び出す時に渡す具体的な値
                      ※ add(3, 5) の 3 と 5 が引数です
_______________________

 -- class : オブジェクトの性質と動作を定義した設計図 (名前、身長、体重)
            extendsを用いて他のクラスを継承可
 -- Instance : クラスに基づいて作られたオブジェクト (マイケル、110、110)


1. 基本的な型の機能

  -- 型推論 : コード上で明示的に型を指定しなくても型を推論する

  -- 型アサーション : 型推論が間違っている場合や、より具体的に型を指定したい場合 / 変数 = ( 値 as 型 ) as 型
                  ※実行時にエラーを引き起こす可能性があるので注意

                  let someValue: any = "Hello, World!";

                  // 型アサーションを使って、この値が文字列であることを明示する
                  let strLength: number = (someValue as string).length;


---------------------------------------------
  -- 型エイリアス(type) : 型の定義に名前をつけられる機能 / type 変数名 = 型
      
        -- インデックス型 : オブジェクトや配列などのデータ構造に柔軟にアクセスする方法を提供する型
                          オブジェクトのキー名を明記せずに型エイリアスを定義可 / { []: 型名 }
                          ユニオン型・タプル型・関数型など、オブジェクト型以外の型に対してもエイリアスを作成可
                          ※キー名やキー数が事前に定まらないケースのオブジェクトを定義したい時に便利
                          ※classに対して実装できない

                          type NumberDictionary = {
                            [key: string]: number; // キーは文字列、値は数値
                          };
                          
                          // この型を使ったオブジェクトの例
                          const ages: NumberDictionary = {
                            Alice: 30,
                            Bob: 25,
                            Charlie: 35,
                          };
                          
                          console.log(ages.Alice); // 30
                          console.log(ages.Bob);   // 25

  -- Interface / インターフェイス : オブジェクトの構造を定義する機能
                                  ※インターフェイス：再宣言・拡張◯。型エイリアス:再宣言・拡張×
                                  ※ユニオン型は利用不可

                                interface Employee extends Person {
                                  employeeId: number; // 社員ID
                                }
                                
                                const jane: Employee = {
                                  name: "Jane",
                                  age: 25,
                                  employeeId: 123,
                                  greet: () => {
                                    console.log(`Hello, my name is ${jane.name} and my ID is ${jane.employeeId}.`);
                                  }
                                };
                                
                                jane.greet(); // "Hello, my name is Jane and my ID is 123."

  -- implements : 「implements」は、「この工場（クラス）は、このルール（インターフェース）を守ってちゃんと動物ロボットを作ります!」という約束
                  class(普通のクラス)・abstract class(抽象クラス)がインターフェイスを実装する際に使用
                  ※interfaceにはimplementsは使えません
                  ※interfaceに対してimplementsを利用することで、クラスに対する実装の強制が可

  -- extends : classの継承。元のクラスのプロパティやメソッドを引き継いで（継承して）使うことができる

| 特徴                   | interface	           | type
| オブジェクトの定義       | ○	                   | ○
| クラスの実装(implements)|	○	                    | ×
| 継承（拡張）	          | extendsを使って拡張可能	 | &を使って交差型で合成可能
| 再宣言	               | マージされる            | 再宣言不可
| ユニオン型・タプル型の定義 | ×	                  | ユニオン型、タプル型なども定義可能
| 関数型の定義	          | ×	                    | 定義可能
---------------------------------------------

  -- アクセス修飾子 / Access Modifiers : クラスやオブジェクトのプロパティやメゾットに対して外部からのアクセス範囲を制御する為のもの
      ∟ -- Public : どこからでも(外部からも)アクセス可(クラスの外部からもアクセスできる)
                    ※デフォルトではすべてのプロパティやメソッドはpublic
      ∟ -- Private : クラス内部でのみアクセス可 ※カプセル化の為に使用(クラスの外部やサブクラスからはアクセスできない)
      ∟ -- Protected : クラス内部および、サブクラス(継承したクラス)のみアクセス可（クラスの外部からはアクセスできないが、継承したクラスからはアクセスできる）


1. 実際の開発で重要な型

  -- Enum型 / 列挙型 : 特定の値の集合を名前付きで定義できるデータ型
                     ※JavaScriptには無い機能。TypeScriptが拡張した機能
                     ・状態管理（成功、失敗、待機など）
                     ・曜日や月のように決まった選択肢を扱う場合
                     ・エラーメッセージやステータスコードの管理（例: HTTPステータスコード）
                     
                     enum Day {
                      Sunday,
                      Monday,
                      Tuesday,
                      Wednesday,
                      Thursday,
                      Friday,
                      Saturday
                    }
                    
                    let today: Day = Day.Monday;
                    console.log(today); // 出力: 1

  -- Intersection / インターセクション型 : 複数の型をマージして1つになった型 / type ExtendedInfo = Type1 & Type2 & Type3...;

  -- Literal / リテラル型 : 決まった文字列や数値しか入らない型

                          let fruit: "apple" | "banana" | "orange";
                          fruit = "apple";   // OK
                          fruit = "banana";  // OK
                          fruit = "orange";  // OK
                          fruit = "grape";   // エラー: 型 '"grape"' を型 '"apple" | "banana" | "orange"' に割り当てることはできません。

  -- never型 : 値を返さない・処理が決して終わらない・全ての可能なケースが除外されているということを表す型
              ・エラーハンドリング関数
              function throwError(message: string): never {
                throw new Error(message);
              }

              ・無限ループ
              function infiniteLoop(): never {
                while (true) {
                    // 無限ループ
                }
              }

              ・型ガード
              type Animal = "dog" | "cat";

              function checkAnimal(animal: Animal): string {
                  if (animal === "dog") {
                      return "It's a dog!";
                  } else if (animal === "cat") {
                      return "It's a cat!";
                  }
                  // ここで animal の型は never 型になる
                  // 全ケースを処理したのでここには到達しないことを示す
                  return animal;
              }

  -- throw : 「エラーを起こす」という命令


1. TypeScriptのテクニック

  -- ネスト : 入れ子、構造が何層にも重なっていること
  
  -- Optional Chanining : オブジェクトのプロパティやメゾットにアクセスする時に、
                          そのプロパティやメゾットが存在しない場合でもエラーを返さずに、undefinedを返す記法(?)
                          
                          const user = {
                            name: "Alice",
                            address: {
                              city: "Wonderland",
                            },
                          };

                          // 通常のアクセス
                          console.log(user.address.city); // Wonderland

                          // オプショナルチェイニングを使ったアクセス
                          console.log(user.address?.city); // Wonderland

                          // オプショナルチェイニングで安全にアクセス
                          console.log(user.profile?.age); // undefined（エラーにならずundefinedが返される）

  -- Non-null Assertion Operator / ノンヌルアサーション演算子 : TypeScriptで使える演算子「!」のこと
                                                            変数やプロパティの後に演算子を付けることで、
                                                            その値がnullやundefinedではないことを証明することができる

                                                            function greet(name: string | null) {
                                                              // nameがnullの場合もあるけど、絶対にnullじゃないと保証できる場合
                                                              console.log("Hello, " + name!); 
                                                            }
                                                            
                                                            greet("Alice"); // Hello, Alice

  -- 型ガード : 条件分地にて型のチェックを行った際、その条件分岐ブロック以降は変数の型を絞り込まれる推論がw行われること

              function printId(id: number | string | boolean) {
                if (typeof id === "string") {
                  // このブロック内では id は string 型
                  console.log("ID in uppercase: " + id.toUpperCase());
                } else if (typeof id === "number") {
                  // ここでは id は number 型
                  console.log("ID: " + id);
                } else {
                  // ここでは id は boolean 型
                  console.log("Boolean ID: " + id);
                }
              }
              
  -- keyofオペレーター : TypeScriptの演算子。型のプロパティ名だけを取り出してUnion型にする

  -- readonly : プロパティでを変更できないように制御する
                宣言時に設定された値を後から変更できなくなるため、意図しない変更や上書きを防ぐことができる

                ・const : 変数全体を再代入不可にするもので、変数やオブジェクト全体に適用される
                ・readonly : オブジェクトのプロパティ単位で再代入不可にするもので、インターフェースや型定義内で使う

  -- unknown : 「どんな型か分からない」という意味の型で、どんなデータ型でも一時的に受け入れることができる柔軟な型
              ・any は型チェックがない「万能」型で、誤ってエラーの原因になる可能性がある
              ・unknown は一時的な「柔軟な」型で、型チェックが必要なため、より安全にコードを書くのに役立

  -- 非同期のAsync.Await : Async/Awaitは「時間がかかる処理」をシンプルに書くための便利な方法
                         ・async 関数内では、順番通りにデータが取得でき、他のコードがエラーになりにくくなるのが利点 
                         ・await を使うと、まるで「止まって待つ」というイメージで、処理が進む順序がわかりやすくなる

                          async function getData() {
                            const data = await fetchData(); // データが取れるまで待つ
                            console.log(data); // データを使う
                          }

  -- Promise : 「非同期処理」 非同期処理とは、時間がかかる処理（データ取得や計算など）を他の処理と並行して進める方法
                Promiseは「今後いつか結果が返ってくる約束」というイメージで、以下の3つの状態を持つ
                ・Pending（保留中）: 処理がまだ終わっていない状態
                ・Fulfilled（成功）: 処理が成功して結果が返ってきた状態
                ・Rejected（失敗）: 処理が失敗してエラーが返ってきた状態

                fetch("https://api.example.com/data")
                .then((response) => response.json()) // データ取得成功後、結果をjson形式に変換
                .then((data) => console.log(data)) // 取得したデータを表示
                .catch((error) => console.error("エラー:", error)); // 失敗時のエラーメッセージ表示

  -- 型定義ファイル : TypeScriptでJavaScriptのライブラリやコードの型を定義したファイルで
                    「.d.ts」 という拡張子を持っている
                    1.コード補完: 関数の引数や返り値などが分かり、IDEが自動補完してくれる
                    2.エラーチェック: ライブラリ使用時に型の不一致を事前に防げる
                    3.ドキュメント代わり: 型情報がわかるため、ライブラリの利用方法が理解しやすい


1. TypeScriptの開発時設定

  -- tsconfig.json : TypeScriptプロジェクト全体の設定を管理するファイル
                      1. プロジェクトの設定管理: TypeScriptがどのファイルを対象にするか、どのディレクトリを無視するかを指定
                      2. コンパイルオプション: コンパイル時に使うオプション（例：エラーの扱い方、出力先など）を一元管理
                      3. 開発環境のカスタマイズ: 自動補完、エラー警告のレベルなどの調整

                      - よく使うプロパティ -
                      {
                        "compilerOptions": {
                          "target": "es5",                // 出力されるJavaScriptのバージョン
                          "module": "commonjs",           // モジュールシステムの指定
                          "strict": true,                 // 厳格な型チェックの有効化
                          "esModuleInterop": true,        // ESモジュールとの互換性を有効にする
                          "outDir": "./dist",             // 出力先ディレクトリの指定
                          "rootDir": "./src"              // ソースコードディレクトリの指定
                        },
                        "include": ["src/**/*"],          // 対象とするファイル/ディレクトリ
                        "exclude": ["node_modules", "dist"] // 対象外のディレクトリ
                      }
  -- Prettier : コードを自動でフォーマットするためのツール
  -- ESLint : コードの品質やスタイルのチェックを行い、エラーや潜在的な問題を発見するためのツール

  -- コンパイルオプション : プログラムをコンパイルするときに特定の挙動や設定を指定するためのオプション
     -- nolmplicitAny : true に設定すると、TypeScript が「どの型か不明な変数」に自動的に any 型を割り当てないようになる(直訳:暗黙のanyを許さない)
     -- strictNullChecks : nullやundefinedが原因のエラーを防ぐためのもの。変数やパラメーターにnullやundefinedが入る場合、TypeScriptがエラーを出してくれる
     -- target : コンパイル後にどのバージョンのJavaScriptに変換するかを指定するもの(TypeScriptはJavaScriptにコンパイルされるため)