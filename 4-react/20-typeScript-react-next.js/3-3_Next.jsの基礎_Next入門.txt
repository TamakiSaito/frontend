1. Next.js入門

-- プロジェクトのセットアップ
  $ create-next-app <プロジェクト名>
    --ts : オプションをつけるとTypeScript向けのプロジェクトが作成される

  // next-sampleと言う新規のNext.jsプロジェクト作成
  $ npx create-next-app@latest --ts next-sample
  $ npm run dev

-- レンダリング手法(4つ)
  ① SSG(Static Site Generation) / 静的サイト生成 : HTMLを事前生成して高速に配信するための仕組み
        ・SEOやパフォーマンスに強いため、静的コンテンツに最適
        ・リアルタイム性が必要な場合は、ISRや動的レンダリングと併用が効果的
        ・Next.jsを使う場合、getStaticPropsとgetStaticPathsが鍵となる

        - SSGの適用シーン
          変化が少ないコンテンツ : 企業のWebサイト、ブログ、商品一覧ページなど
          SEOが重要なページ : トップページ、ランディングページ
          コスト削減が目的の場合 : サーバー処理を最小限に抑えたい場合

  ② CSR(Client Side Rendering) / クライアントサイドレンダリング : クライアント(ブラウザ)側でJavaScriptを実行してコンテンツを描画するレンダリング手法
        ・優れたユーザー体験 : ページ全体をリロードせず、動的な操作が可能(ページ遷移が高速)
        ・効率的なデータ取得 : 必要なデータだけを動的に取得するため、通信量を抑えられる(開発が簡単)
        ・サーバー負荷が軽い

        - CSRの適用シーン
          リアルタイム更新が必要なアプリ : チャットアプリ、ダッシュボードなど
          動的操作が多いWebアプリ : eコマース、SPA（シングルページアプリケーション）
          SEOがそこまで重要でないアプリ: 社内ツールや会員制サイト
  
  ③ SSR(Sever Side Rendering) / サーバーサイドレンダリング : サーバーでHTMLを生成してクライアント(ブラウザ)に返すレンダリング手法
        ・SEOに強い : サーバー側で完全なHTMLが生成されるため、検索エンジンがコンテンツを正しくインデックスできる
        ・初期表示が速い : HTMLがサーバーで生成されて送られるため、ブラウザはすぐに表示を開始できる（サーバーでの処理時間が含まれる為、SSRが必ず速いわけではない）
        ・動的データ対応が簡単 : サーバーが毎回HTMLを生成するため、ユーザーごとに異なるデータや最新のデータを表示できる
        ・クライアント依存を軽減 : クライアント側での処理が軽くなるため、JavaScriptが無効な環境でもコンテンツが表示される

        - SSRの適用シーン
          SEOが重要なWebサイト : ブログ、ニュースサイト、企業ページ
          動的データが必要なWebアプリ : ログイン後のダッシュボードやカスタマイズされたページ
          初期表示を高速にする必要がある場合 : 広告キャンペーンページやECサイトの商品ページ

  ④ ISR(Incremental Static Regeneration) / インクリメンタル静的再生成 : 静的サイト生成(SSG)と動的データ更新の両方のメリットを兼ね備えたレンダリング手法
        ・静的HTMLの配信 : 初期リクエストに対しては、事前に生成された静的なHTMLを配信する
        ・動的データの再生成 : 一定の時間が経過したら、バックグラウンドで新しいHTMLを生成して保存する

        - ISRの適用シーン
          ECサイトの商品ページ : 商品情報が頻繁に変わるが、完全なリアルタイム性は必要ない場合(例:在庫や価格更新が数分ごとに反映)
          ニュースサイト : 記事が追加されたら、一定時間後に最新状態を反映。
          ブログ : 投稿内容が頻繁には変わらないが、たまに更新が必要な場合


  -- Entry Point / エントリーポイント : プログラムやソースコードが実行される開始点
  -- Interactive / インタラクティブ : 相互に作用する、双方向的な、対話式のという意味 
  -- Index / インデックス : 指標、指針、指示するもの
  -- Scalability / スケーラビリティ : システムや機器、ソフトウェアなどが規模や利用負荷の増大に対応できる度合い、拡張性、柔軟性 
  -- Crawling / クローリング : 検索エンジンがインターネット上のWebページを自動的に巡回し、その内容を取得・収集するプロセスを指します
                              この作業を行うプログラムを「クローラー（Crawler）」または「スパイダー（Spider）」と呼ぶ
                              クローリングは検索エンジンがWebページを把握し、検索結果に反映させるために重要なプロセス
  -- Routing System / ラウティングシステム : ユーザーがアクセスするURL（パス）に応じて適切なコンテンツや機能を提供する仕組み
  -- Bundling / バンドリング : 複数のファイルやリソース（HTML、CSS、JavaScriptなど）を1つまたは少数のファイルにまとめるプロセスのこと


1. 環境変数 / config
  Next.jsはビルドインで環境変数のための`.env`ファイルを処理できる
  `.local`がついているものは`.gitignore`に追加される事を意図している
  APIキーなどの公開したくない値を保存する為に使用
   -- `.env` : 環境を問わず常に使用可能
   -- `.env.local` : 環境を問わず常に使用可能
   -- `.env.${環境名}` 
   -- `.env.${環境名}.local`
   -- `.env.development` : 開発サーバーを動かす時に使用
   -- `.env.development.local` : 開発サーバーを動かす時に使用
   -- `.env.production` : ビルド時や本番環境で動かす時に使用
   -- `.env.production.local` : ビルド時や本番環境で動かす時に使用

  - クライアントサイドでアクセスしたい値に関しては、環境変数の名前の頭に`NEXT_PUBLIC_`をつける