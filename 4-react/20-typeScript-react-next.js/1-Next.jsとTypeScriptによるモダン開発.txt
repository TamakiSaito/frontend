1. Next.js と TypeScript

  -- モダン開発 : 最新の技術やツールを使って効率的で高品質なソフトウェア開発する方法

  -- React :  2013年にFacebookが公開したUIライブラリ

  -- Next.js :  オープンソースのWebアプリケーションフレームワーク(ウェブサイトを作るための特別な箱)
                Reactの機能性を活かしつつ、Reactだけではカバーできない領域を補う、実践的なWebフレームワーク
                サーバーの機能も一部持ち合わせている
 
  -- Framework :  プログラムやライブラリの集合体(便利な道具がたくさん入っている箱)
                  ライブラリの例 : React、jQuery
                  フレームワークの例 : Next.js、Ruby on Rails

  -- DOM / Document Object Model : ブラウザがHTMLを解釈した際に生成されるツリー構造のオブジェクトモデル
                                   (ウェブページを部品として整理する地図)
                        
  -- 仮想DOM :  直接ブラウザの持つDOMのAPIを操作するのではなく、nodeが変更あった場合、変更後の仮想DOMを比較して
                変更箇所を特定し、必要に応じてまとめて実際のDOMに変更を適応する(コピーの変わった部分だけを実際のページに反映)

  -- SPA / Single Page Application :  起動時に一度HTML全体をロードし、
                                      以後はユーザーインタラクションに応じてAjaxで情報を取得し
                                      動的にページを更新するWebアプリケーション
                                      (一つのページだけで動くアプリ)

                                      ※YouTubeやXもSPAの仕組みを使っている
                                       動画を見ている途中で他のページに移動しても、
                                       画面全体がリロードされることなく、すぐに次の内容が表示される

  -- Node.js : サーバーサイド(バックエンド)でJavaScriptを実行できる環境

  -- npm / Node Package Manager : Node.js用のパッケージ管理ツール

  -- package.json : npmプロジェクトの設定や依存関係を記述するファイル

  -- AltJS : JavaScriptの代替言語,JavaScriptにコンパイルされる他のプログラミング言語
            ・TypeScript:静的型付け
            ・CoffeeScript:コードの量を減らす
            ・Elm:関数型プログラミング
            ・Dart:Flutterというフレームワークでモバイルアプリ開発
            ・PureScript:関数型プログラミング
            (より短くて読みやすいコードを書いたり、型の厳密さを取り入れたりして、バグを減らすことができる)

  -- Build : ソースコードから実行ファイル作成までの一連の流れをビルドという
  
  -- Compile : 人が認識できるソースコード(プログラム)を実際にコンピューターが
               理解できる機械語形式のプログラムに変換する作業のことをコンパイルという

  -- SSR / Server Side Rendering : サーバーでHTMLを生成し、クライアントに送信するレンダリング方式
  
  -- SEO / Search Engine Optimization : 検索エンジン最適化
                                        Webサイトの検索エンジンの検索結果でより上位に表示されるように最適化するための手法やプロセス

  -- SSG / Static Site Generation : 静的サイト生成
                                    HTMLファイルをあらかじめビルド時に生成しておき
                                    サーバーでリクエストを受けた時にその静的HTMLファイルを返す方式
                                    
  -- Component : 再利用可能な部品

  -- props : 親から子コンポーネントにデータを渡す

  -- state : コンポーネント内で保持されるデータ

  -- React Hooks : 関数コンポーネントでも状態管理やライフサイクル管理などの機能を
                   利用できるようにする機能(特別な道具)
                   利点：コードがシンプル・再利用性が高い・ライフサイクルの分割

    -- useState : コンポーネント内での状態(state)を持つ事ができる
                  (数字や情報を覚えるメモ)
    -- useEffect : 副作用(データの取得、DOM操作、タイマーのセットなど)を扱うためのHook
                  (「何かが起きたらこれをする」という約束)
    -- useContext : コンテキスト(データを階層構造で渡す仕組み)を使う際にコンテキストの値を受け取るためのHook
                  (グループ全員で共有するメモ)
    -- useReducer : useStateの代わりに複雑な状態管理を行うためのHook。Reduxのような状態管理のロジックを関数コンポーネントで簡単に実装できる
                  (たくさんの動きを整理してまとめる道具)
    -- useRef : DOM要素や変数の値を保持するためのHook。コンポーネントが際レンダリングされても保持される
               (すぐに触りたい情報やものを覚えておく道具)
    -- useMemo : 計算コストの高い処理の結果をメモ化して再計算を避けるためのHook
                (大変な計算を覚えておくメモ)
    -- useCallback : 関数のメモ化を行い、再レンダリング時に同じ関数インスタンスを再利用するためのHook
                    (同じ動きを何度も作らないように覚えておく道具)

 -- Atomic Design : 
    -- Atoms : UIの最小単位。それ以上機能的に分割できないもの。(ボタンなど)
    -- Moluecles : 1つ以上のAtomsを組み合わせて作られる要素。(検索フォームなど)
    -- Organisms : 1つ以上のMoleculesを組み合わせて作られる要素。(ヘッダーなど)
    -- Templates : Organismsを組み合わせて1つの画面として成り立つもの
    -- Pages : Templateにアプリケーションとして動作するデータが注ぎ込まれたもの

 -- Storybook : コンポーネントをカタログ化して管理できる開発ツール