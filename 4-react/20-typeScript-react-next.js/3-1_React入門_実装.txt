1. React入門

-- React実装
$ npx creat-react-app [プロジェクト名]
  
  -- `--template`引数を与えると、他のコードテンプレートを使用したプロジェクトを構築できます
  -- TypeScriptで型を付けられたプロジェクトを作成
     $ --template typescript
--

$ npx creat-react-app@latest react-sample --template typescript
$ cd react-sample // プロジェクトのルートディレクトリ直下に移動
$ npm run start // 開発サーバーを起動する


 -- Component : UIの最小単位であり、再利用可能な部品
                ・Functional Component / 関数コンポーネント : Hooks(useState,useEffectなど)
                ・Class Component / クラスコンポーネント : this.state で状態を管理し、this.setState で状態を更新


 -- Context : 深いコンポーネント階層において、props を使わずにデータを渡す仕組み
              「グローバルなデータ共有」を実現する仕組み

    -- Provider : Providerにデータを渡し / 子コンポーネントに渡すデータを提供する役割(提供)
    -- Consumer : Consumerがデータを受け取る / 関数を子要素として渡す(消費)
              
              - コンテキストを使うべきシチュエーション
                テーマ管理(例: ダークモード/ライトモード)
                ユーザー認証情報の共有
                多言語対応(i18n)
                アプリ全体の設定や状態の共有

                Props	                           Context
  データの渡し方	親から子へ直接渡す	                グローバルに渡す
       適用範囲	 子コンポーネントに限定	              ツリー全体で共有
          用途	特定のデータを渡す場合	             アプリ全体の設定や状態を共有する場合
         柔軟性  データの受け渡しが明確で管理しやすい	  必要以上に多用すると追跡が困難になる
            例	ボタンのラベルやイベントハンドラ	    ユーザー認証情報、テーマ、言語設定
                