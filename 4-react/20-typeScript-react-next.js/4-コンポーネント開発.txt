1. コンポーネント開発

-- Presentational Component : 見た目を実装するコンポーネント
                             基本的にPropsで渡されたデータを元に、適切なUIパーツを表示することだけをする
-- Container Component : デザインは一切実装せずに、ビジネスロジックのみを担う
                        Hooksを持たせて状態を使って表示内容を切り替える・APIコールなどの副作用を実装するなどの実装をする

-- Atomic Design / アトミックデザイン : デザインシステムを構築する方法論 
  -- Atoms : UIの最小単位。それ以上機能的に分割できないもの(ボタン/テキスト)
  -- Moluecles : 1つ以上のAtomsを組み合わせて作られる要素(検索フォーム/ラベル付きテキストボックス)
  -- Organisms : 1つ以上のMoleculesを組み合わせて作られる要素(ヘッダー/入力フォーム)
  -- Templates : Organismsを組み合わせて1つの画面として成り立つもの(ページレイアウト)
  -- Pages : Templateにアプリケーションとして動作するデータが注ぎ込まれたもの(ページそのもの)


1. styled-componentsによるスタイル実装

-- styled-components : CSS in JSと呼ばれるライブラリの一つ / JavaScript内にCSSを記述できる
  #Next.jsプロジェクト内で実行
  $ npm install --save styled-components
  $ npm install --save-dev @types/styled-components
    
  next.config.jsに設定を追加
  /** @type {import('next').NextConfig} */
  const nextConfig = {
    reactStrictMode: true,
    compiler: {
      styledComponents: true,
    },
  }
  
  module.exports = nextConfig

-- mixin : プログラミングにおける再利用可能なコードの断片
           クラスやオブジェクトに特定の機能を追加する方法

            // Mixin: 共通の機能
            const canFly = {
              fly() {
                console.log(`${this.name} is flying!`);
              },
            };

            const canSwim = {
              swim() {
                console.log(`${this.name} is swimming!`);
              },
            };

            // クラス
            class Animal {
              constructor(name) {
                this.name = name;
              }
            }

            // Mixinを適用
            Object.assign(Animal.prototype, canFly, canSwim);

            // 実行
            const bird = new Animal('Bird');
            bird.fly();  // "Bird is flying!"
            bird.swim(); // "Bird is swimming!"

            - Mixin自体 → 機能を定義したオブジェクト（ここでは canFly や canSwim）。
            - Mixinの適用 → Object.assign() などを使って、Mixinをクラスに追加する操作。

-- Storybook : UIコンポーネント開発向けの支援ツール
               個々のコンポーネントごとに確認できる

               $ npx sb@latest init
               $ npm run storybook


-- _フォルダ名 : Next.jsのApp Routerでは、アンダーバーで始まるフォルダ名はルーティングから除外される
               アンダーバーを使用することで、ルーティングに関係のないフォルダを視覚的に区別できる