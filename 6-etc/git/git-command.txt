- 確認

$ git branch
リモート追跡ブランチ以外の Local Branch 確認

$ git branch -a
全ての Local Branch 確認

$ git status
ファイル状態確認

$ git add --dry-run .
addで実行される予定内容表示

$ git ls-files
Local Repository Staging ファイルリスト表示

$ git diff --name-only
WorkTree と Staging の差分ファイル表示
殆ど $ git st と同じ内容になる
--name-only はファイル単位でシンプルに見れるのでオススメ

$ git diff --name-only branch1 branch2
branch1 と branch2 の差分ファイル表示
ブランチの差分がファイル単位でシンプルに見れます。

$ git diff
WorkTree と Staging の差分コードソース表示
(コードソース差異なので変更が多いと膨大なログが表示されるため注意)

$ git diff --staged
Staging と Committing の差異表示

$ git log -2
Commit 履歴 最新２コミット表示

$ git log -2 --stat
Commit 履歴２コミット表示 + 変更ファイル表示

$ git log -2 --patch
$ git log -2 --p
Commit ファイル差分 ２コミット表示
( そのままだとコード全表示で膨大な行数になるため、
$ git log -2 -p など表示を減らすためオプションを組み合わせるのがオススメ )

$ $ git log -p ファイルパス/ファイル名
( 誰が編集したかなど ) 特定ファイルの変更履歴を表示

$ git stash list
保存状態一覧表示

$ git clean -nd
Untrackedファイルの確認

$ git show
最新 Commit 内容表示

$ git branch -r
Remote Branch 確認

$ git remote
Remoteリポジトリ表示

$ git remote -v
Remoteリポジトリ + URL 表示

$ git remote rm origin
Remoteリポジトリ削除

$ git help
ヘルプページ表示

$ git help -a
Git全コマンドリスト

$ git tag
Tag 一覧表示

$ git reflog
過去の HEAD Commit 一覧表示

$ git config -l
Repository 設定内容表示

$ git config user.email
設定 e-mail 表示

$ git config user.name
設定ユーザー名 表示

$ find ~/ -name ".git"
gitフォルダの場所を忘れてしまった際に使用。.gitがあるフォルダがローカルリポジトリフォルダ

$ git --version
gitインスールバージョン確認



- 変更

$ git add .
WorkTree ファイルを全て add で Staging

$ git commit -m "commit comment"
コメントを付けて commit 実行

$ git commit -am "commit comment"
add & コメント付きで commit 実行

$ git commit -F- <<EOM
複数行コメントでコミット 1

$ git commit -F- <<EOM
> 要約
>
> 詳細
> 
> EOM

$ git commit -m "コメント1行目" -m "コメント2行目" -m "コメント3行目"
複数行コメントでコミット 2

$ git commit --amend
直前のコミットを編集

$ git push origin master
Remote Repository に Local Repository を反映

$ git push -f origin master
Remote Repository に Local Repository を強制反映
上記 -f なしで conflict などで rejected エラー発生したときも
エラー回避しPush可能。

$ git fetch
Remote Bookmark をダウンロード。FETCH_HEADブランチ作成

$ git pull
Local WorkTree に Remote Repository を ダイレクト反映
※ git pull しても、git fetch と同じ状態になり merge まで実行されないケースがある。
その際は再度 git merge origin/ブランチ名 で解決する。

$ git pull origin <Remote Branch Name>
既に存在する Local Branch へ 最新の Remote Branch を反映
※ ! [rejected] error: failed to push some refs ~
といったコンフリクト(競合)エラー発生時にも有効

$ git branch <branch name>
branch 作成

$ git branch -m <old branch name> <new branch name>
branch 名 変更

$ git checkout <branch name>
作業 branch (HEAD) 変更
WorkTree / Index も 作業branch に合わせたファイル内容に変更

$ git checkout -b <branch name>
上記 branch作成 & 作業 branch (HEAD) 変更 (同時実行)

$ git checkout -b feature/hogehoge origin/feature/hogehoge
( developなどをpullした上で )
ローカル上にない Remote Branch を、ローカル上に作成・移動

$ git merge <branch name>
現在の HEAD branch の Working / Index / Local Repository 全てに、
別の branch を 統合

merge - 親 Commit が２つになる
Rebase - 親 Commit が１つになる

$git stash
変更退避



- 取り消し

HEAD = 作業 branch Commit のイメージ

$ git branch --delete ブランチ名
$ git branch -D ブランチ名
ブランチ削除

$ git reflog
削除したブランチの最後のコミットを見つけ
$ git branch ブランチ名 HEAD@{ログ番号}
ブランチ復活

$ git reset
全ての add を取り消し
Index を WorkTree 状態に戻す

$ git reset HEAD <file>
Staging を Commit の状態に戻す

$ git reset --soft HEAD^
Local Repository のみ 以前の Commit 状態に戻す ( 最新の Commit 取り消し )

$ git reset HEAD^
Local Repository / Staging ２つを、以前の Commit 状態に戻す

$ git reset --hard HEAD
HEAD / Index / WorkTree 全てを、最新 Commit 状態に戻す
( WorkTree差分データが消えるので要注意 )

$ git reset --hard HEAD^
HEAD / Index / WorkTree 全て を 一つ前の Commit 状態に戻す
( WorkTree差分データが消えるので要注意 )

$ git checkout -- <file>
WorkTree を Staging の状態に戻す

$ git revert
コミット打ち消して記録残る

$ git clean -fd
Untracked ファイルの削除

$ git merge --abort
直前 Merge 取り消し

$ git reflog
復活する可能性のある呪文。。

$ git push --delete origin リモートブランチ名
GitHubなどのリモート上ブランチを削除する

$ git rm -r --cached .
ファイル全体キャッシュ削除
$ git rm -r --cached [ファイル名]
ファイル指定してキャッシュ削除



______create_branch______ 
Local (PC) < - > Remote (Github) 
Git fetch origin = refresh 
Git pull origin develop = Local develop <- Remote develop 
>>>>>> npm i 
>>>>>> package.jsonの差分を破棄する 
Git checkout -b branch

______PR______ 
Git add . 
Git commit -m “feat: コミット名” 
Git push origin branch
PR
(closes #2 みたいにイシュー番号を付ける) 
>> コメントがあったら、
修正して改めて git commit -m “fix: ~“
add-commit-pushをして、PRをする。
>> LGTMだったら、マージをする。 

Git checkout develop
Git fetch origin = refresh
Git pull origin develop = Loca

______delete_branch______ 
git checkout develop 
git push origin —delete feature/add_news_font git branch -D feature/add_news_font developのブランチを最新化(fetch, pull) 
git checkout -b branch

______rebase______
git log→q
git commit -m “”
git push origin branch
git rebase -i HEAD~2(個数)
i(insert)
pickを消してsへ変更(1番上を残して)
esc
: コロン
wq
i
#(上から)(コミット名編集もできる)
esc
:
wq

git push origin --force-with-lease branch
(git push-f origin branch)
git log→q


______stash______
一時的に保存する
(developでブランチを切らずに編集してしまった場合、編集の差分を保存)

developブランチで
git stash -m “変更内容”
git checkout -b feat/ブランチ
git stash list（stashしたのは何番目なのか確認）
git stash apply 0
これで差分が入る
〜 git add .

______reset______
git reset HEAD^^（一個だけなら^）
git log
git merge master（コンフリクト解消）
git add .
commit
git push --force-with-lease origin branch
git log

______merge______
git merge branch 結合したいブランチ上でを記載


______conflict______
(開いてるページ消してから開き直す)

nodeで起動してるターミナルを消して
checkout master
fetch
pull
ブランチ行って
git merge master
add .
commit fix: コンフリクト
push


______memo______

・ブランチ名：大文字は使わない/ケバブケース
・feat: の後にスペースいる
・PRはpull request 
・feat: 新しい機能追加(プリフィート)
・fix: 修正
・checkout -b branch はブランチ作成
・checkout branch はブランチに移動
・closes #ナンバー
・git push origin branch : Remote <<<< Local
(今いるブランチしかリモートに移動できない
originはgit上にブランチをlocalからremoteにあげること)
